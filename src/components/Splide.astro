---
export type Carousel = {
  src: string;
  alt: string;
};

const { carousel } = Astro.props as { carousel: Carousel[] };
---

<style>
  .my-slider-progress {
    background: #ccc;
  }

  .my-slider-progress-bar {
    height: 6px;
    transition: width 400ms ease;
    width: 0;
  }
</style>

<link rel="stylesheet" href="/splide.min.css" />
<div class="splide h-full">
  <div class="splide__track h-full">
    <div class="splide__list">
      {
        carousel.map(({ src, alt }) => (
          <div class="relative splide__slide flex place-content-center w-full h-full">
            <img
              src={src}
              alt={alt}
              class="w-full bottom-0 object-cover absolute"
            />
          </div>
        ))
      }
    </div>
  </div>
  <div class="my-slider-progress">
    <div class="my-slider-progress-bar bg-cem"></div>
  </div>
</div>

<script is:inline src="/scripts/splide.min.js"></script>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const splideInstance = new Splide(".splide", {
      type: "fade",
      perPage: 1,
      focus: "center",
      autoWidth: true,
      pagination: false,
      rewind: true,
      rewindByDrag: true,
      autoplay: true,
      interval: 3000,
      throttle: 300,
    });

    const bar = splideInstance.root.querySelector(".my-slider-progress-bar");
    // Updates the bar width whenever the carousel moves:
    splideInstance.on("mounted move", () => {
      var end = splideInstance.Components.Controller.getEnd() + 1;
      var rate = Math.min((splideInstance.index + 1) / end, 1);
      bar.style.width = String(100 * rate) + "%";
    });

    splideInstance.mount();
  });
</script>
